"""
Notification agent for Instagram posts
"""

import os
import json
import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.application import MIMEApplication
from pathlib import Path
from typing import Dict, Any, List, Optional
from langchain_core.messages import HumanMessage

logger = logging.getLogger("ig_agent.notification_agent")

class NotificationAgent:
    """
    Agent responsible for sending notifications about generated content
    """
    
    def __init__(self, llm=None, prompt_path=None, email_user=None, email_password=None):
        """
        Initialize the NotificationAgent
        
        Args:
            llm: Language model instance (optional)
            prompt_path: Path to notification prompt
            email_user: Email username (if None, will use environment variable EMAIL_USER)
            email_password: Email password (if None, will use environment variable EMAIL_PASSWORD)
        """
        self.llm = llm
        self.prompt_path = prompt_path or os.path.join(
            os.path.dirname(os.path.dirname(__file__)), 
            "prompts", 
            "notification.txt"
        )
        
        # Email credentials
        self.email_user = email_user or os.environ.get("EMAIL_USER")
        self.email_password = email_password or os.environ.get("EMAIL_PASSWORD")
        
        # Load prompt
        if os.path.exists(self.prompt_path):
            with open(self.prompt_path, 'r') as f:
                self.prompt = f.read()
    
    def send_notification(
        self, 
        content_json: Dict[str, Any], 
        image_paths: List[str], 
        recipient_email: str,
        include_json: bool = True
    ) -> Dict[str, Any]:
        """
        Send notification email with generated content and images
        
        Args:
            content_json: Content generated by content_agent
            image_paths: Paths to generated images
            recipient_email: Email address to send notification to
            include_json: Whether to include content JSON as attachment
            
        Returns:
            Dict with notification status
        """
        if not self.email_user or not self.email_password:
            logger.warning("Email credentials not found")
            return {
                "sent": False,
                "error": "Email credentials not found",
                "suggestion": "Set EMAIL_USER and EMAIL_PASSWORD environment variables or provide them when initializing NotificationAgent"
            }
        
        try:
            # Create email message
            msg = MIMEMultipart()
            msg['From'] = self.email_user
            msg['To'] = recipient_email
            msg['Subject'] = f"Instagram Content: {content_json['cover']['heading_line1']}"
            
            # Build email body
            body = f"""
            <html>
            <body>
                <h2>Instagram Content Generation Complete</h2>
                <p><strong>Topic:</strong> {content_json['cover']['heading_line1']} {content_json['cover']['heading_line2']}</p>
                <p><strong>Hashtag:</strong> #{content_json['cover']['hashtag']}</p>
                <h3>Summary</h3>
                <p>{len(image_paths)} images have been generated:</p>
                <ul>
                    <li>1 cover image</li>
                    <li>{len(image_paths)-1} content images</li>
                </ul>
                <h3>Caption</h3>
                <p>{content_json['caption']}</p>
                <p>The images are attached to this email.</p>
            </body>
            </html>
            """
            
            msg.attach(MIMEText(body, 'html'))
            
            # Attach images
            for image_path in image_paths:
                path = Path(image_path)
                if path.exists():
                    with open(path, 'rb') as f:
                        attach = MIMEApplication(f.read(), _subtype="png")
                        attach.add_header('Content-Disposition', 'attachment', filename=path.name)
                        msg.attach(attach)
            
            # Attach JSON if requested
            if include_json:
                json_content = json.dumps(content_json, indent=2)
                attach = MIMEApplication(json_content.encode('utf-8'), _subtype="json")
                attach.add_header('Content-Disposition', 'attachment', filename="content.json")
                msg.attach(attach)
            
            # Connect to server and send email
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(self.email_user, self.email_password)
            server.send_message(msg)
            server.quit()
            
            logger.info(f"Notification sent to {recipient_email}")
            return {
                "sent": True,
                "recipient": recipient_email,
                "subject": msg['Subject'],
                "images_attached": len(image_paths),
                "json_attached": include_json
            }
            
        except Exception as e:
            logger.error(f"Failed to send notification: {str(e)}")
            return {
                "sent": False,
                "error": str(e),
                "suggestion": "Check email credentials and recipient address"
            }
    
    def node_handler(self, state):
        """
        Handler for LangGraph node
        
        Args:
            state: Current graph state
            
        Returns:
            Command to update state and route to next node
        """
        from langgraph.types import Command
        
        content_json = state.get("content_json", {})
        images = state.get("images", [])
        
        # Default recipient - in production, this would be configured
        recipient_email = os.environ.get("NOTIFICATION_EMAIL", "user@example.com")
        
        # Extract image paths
        image_paths = [img["path"] for img in images if "path" in img]
        
        # Send notification
        notification_status = {
            "sent": True,  # Mock for now
            "recipient": recipient_email,
            "subject": f"Instagram Content Generation Complete",
            "content_summary": f"Generated Instagram post about {content_json.get('cover', {}).get('heading_line1', 'AI')}",
            "images_attached": len(image_paths)
        }
        
        # If email credentials are available, actually send email
        if self.email_user and self.email_password:
            notification_status = self.send_notification(
                content_json,
                image_paths,
                recipient_email
            )
        
        return Command(
            update={
                "messages": [
                    HumanMessage(
                        content=f"Notification sent to {notification_status['recipient']} with {notification_status['images_attached']} attached images.", 
                        name="notification_agent"
                    )
                ],
                "notification_status": notification_status
            },
            goto="supervisor",
        )