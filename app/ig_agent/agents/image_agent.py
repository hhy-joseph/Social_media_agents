"""
Image generation agent for Instagram posts
"""

import os
import logging
from pathlib import Path
from typing import Dict, Any, List
from langchain_core.messages import HumanMessage

logger = logging.getLogger("ig_agent.image_agent")

class ImageAgent:
    """
    Agent responsible for generating Instagram images from content
    """
    
    def __init__(self, llm=None, prompt_path=None, templates_dir=None, output_dir=None):
        """
        Initialize the ImageAgent
        
        Args:
            llm: Language model instance (optional)
            prompt_path: Path to image generation prompt
            templates_dir: Directory containing SVG templates
            output_dir: Directory to save generated images
        """
        self.llm = llm
        self.prompt_path = prompt_path or os.path.join(
            os.path.dirname(os.path.dirname(__file__)), 
            "prompts", 
            "images_generation.txt"
        )
        
        # Set templates directory
        if templates_dir:
            self.templates_dir = Path(templates_dir)
        else:
            self.templates_dir = Path(os.path.dirname(os.path.dirname(__file__))) / "static"
        
        # Set output directory
        self.output_dir = output_dir
        
        # Load prompt
        if os.path.exists(self.prompt_path):
            with open(self.prompt_path, 'r') as f:
                self.prompt = f.read()
    
    def generate_images(self, content_json: Dict[str, Any], output_dir: str = None) -> List[Dict[str, Any]]:
        """
        Generate images from content JSON
        
        Args:
            content_json: Content generated by content_agent
            output_dir: Directory to save generated images (overrides init value)
            
        Returns:
            list: Metadata about generated images
        """
        from ig_agent.templates.template_processor import TemplateProcessor
        
        # Use provided output_dir or the one set during initialization
        output_dir = output_dir or self.output_dir
        if not output_dir:
            raise ValueError("Output directory is required")
        
        # Create output directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)
        
        # Initialize template processor
        processor = TemplateProcessor(self.templates_dir, output_dir)
        
        # Process cover image
        cover_path = processor.generate_cover(content_json.get("cover", {}))
        
        # Process content images
        content_paths = []
        for i, page in enumerate(content_json["content_pages"]):
            page_number = i + 1
            content_path = processor.generate_content_page(
                page, 
                page_number,
                with_image="illustration_description" in page and page["illustration_description"]
            )
            content_paths.append(content_path)
        
        # Create image metadata
        images = [
            {
                "type": "cover",
                "path": str(cover_path),
                "file_name": os.path.basename(cover_path),
                "status": "generated"
            }
        ]
        
        for i, path in enumerate(content_paths):
            images.append({
                "type": "content",
                "page_number": i + 1,
                "path": str(path),
                "file_name": os.path.basename(path),
                "status": "generated"
            })
        
        logger.info(f"Generated {len(images)} images")
        return images
    
    def node_handler(self, state):
        """
        Handler for LangGraph node
        
        Args:
            state: Current graph state
            
        Returns:
            Command to update state and route to next node
        """
        from langgraph.types import Command
        
        content_json = state.get("content_json", {})
        if not content_json or "error" in content_json:
            return Command(
                update={
                    "messages": [
                        HumanMessage(
                            content="Error: Invalid content JSON. Cannot generate images.", 
                            name="image_agent"
                        )
                    ],
                    "images": []
                },
                goto="supervisor",
            )
        
        # Create dated output directory
        import tempfile
        from datetime import datetime
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Determine base output directory
        base_output_dir = self.output_dir or Path(tempfile.gettempdir())
        
        # Create dated subdirectory structure
        date_folder = datetime.now().strftime("%Y-%m-%d")
        output_dir = Path(base_output_dir) / date_folder / timestamp
        os.makedirs(output_dir, exist_ok=True)
        
        logger.info(f"Creating output in: {output_dir}")
        
        # Generate images
        all_images = self.generate_images(content_json, output_dir)
        
        return Command(
            update={
                "messages": [
                    HumanMessage(
                        content=f"Generated {len(all_images)} images. Cover and {len(all_images)-1} content pages created successfully.", 
                        name="image_agent"
                    )
                ],
                "images": all_images,
                "output_dir": str(output_dir)
            },
            goto="supervisor",
        )